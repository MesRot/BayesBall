AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Stack for updating the data needed for BayesBall

Globals:
  Function:
    Timeout: 20
    MemorySize: 128

Parameters:
  Env:
    Type: String
  RapidApiKey:
    Type: String
  StackName:
    Type: String
    Default: bayesball

Resources:
  SeasonMetaDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: "${StackName}-seasons-meta-${Env}"
      KeySchema:
        - AttributeName: league_id
          KeyType: HASH
        - AttributeName: season_year
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: league_id
          AttributeType: N
        - AttributeName: season_year
          AttributeType: N
        - AttributeName: posteriors_need_to_update
          AttributeType: N
        - AttributeName: last_updated_fixtures
          AttributeType: S
        - AttributeName: data_need_to_update
          AttributeType: N
      BillingMode: PAY_PER_REQUEST  # Use on-demand billing mode
      GlobalSecondaryIndexes:
        - IndexName: UpToDateIndex
          KeySchema:
            - AttributeName: posteriors_need_to_update
              KeyType: HASH
          Projection:
            ProjectionType: KEYS_ONLY
        - IndexName: LastUpdatedIndex
          KeySchema:
            - AttributeName: data_need_to_update
              KeyType: HASH
            - AttributeName: last_updated_fixtures
              KeyType: RANGE
          Projection:
            ProjectionType: INCLUDE
            NonKeyAttributes:
                - last_updated_teams
                - start_date
                - end_date
                - last_updated_posteriors

  BayesballRawBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: "${StackName}-raw-${Env}"
      AccessControl: Private

  FetchFixturesAndTeamsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: "${StackName}-fetch-fixtures-and-teams-lambda-${Env}"
      CodeUri: src/data_import/fetch_fixtures_and_teams/
      Handler: app.lambda_handler
      Runtime: python3.11
      Timeout: 300
      MemorySize: 128
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SeasonMetaDynamoDBTable
        - S3WritePolicy:
            BucketName: !Ref BayesballRawBucket
      Environment:
        Variables:
          RAPID_API_KEY: !Sub "${RapidApiKey}"
          SEASONS_META_TABLE: !Ref SeasonMetaDynamoDBTable
          DESTINATION_BUCKET: !Ref BayesballRawBucket
          MAX_UPDATES: 10
          SLEEP_TIME_BETWEEN_CALLS_SECONDS: 5
      Events:
        InvocationLevel:
          Type: Schedule
          Properties:
            Schedule: cron(0 */8 * * ? *) # Runs every 8 hours

  FetchSeasonsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: "${StackName}-fetch-seasons-lambda-${Env}"
      CodeUri: src/data_import/fetch_seasons/
      Handler: app.lambda_handler
      Runtime: python3.11
      Timeout: 120
      MemorySize: 256
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SeasonMetaDynamoDBTable
      Environment:
        Variables:
          RAPID_API_KEY: !Sub "${RapidApiKey}"
          SEASONS_META_TABLE: !Ref SeasonMetaDynamoDBTable
      Events:
        InvocationLevel:
          Type: Schedule
          Properties:
            Schedule: cron(15 0 ? * 1 *) #every monday at midnight



